import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Checkbox } from '@/components/ui/checkbox';
import { useToast } from '@/hooks/use-toast';
import { ApiService, InstallmentPlan, RoomGrade, Duration, AcademicYear } from '@/services/api';
import { supabase } from '@/integrations/supabase/client';
import { 
  Calendar, 
  Building, 
  CreditCard, 
  CheckCircle, 
  ArrowRight, 
  ArrowLeft,
  Plus,
  X,
  Loader2,
  Copy,
  Sparkles
} from 'lucide-react';

interface AcademicYearData {
  name: string;
  start_date: string;
  end_date: string;
  is_current: boolean;
}

interface RoomGradePricing {
  room_grade_id: string;
  weekly_rate: number;
}

interface InstallmentPlanConfig {
  installment_plan_id: string;
  due_dates: string[];
  deposit_amount: number;
}

interface WizardStep {
  id: number;
  title: string;
  description: string;
  icon: React.ComponentType<any>;
}

const AcademicYearSetupWizard: React.FC<{
  isOpen: boolean;
  onClose: () => void;
  onSuccess: () => void;
  editingAcademicYear?: AcademicYear | null;
}> = ({ isOpen, onClose, onSuccess, editingAcademicYear }) => {
  const { toast } = useToast();
  const [currentStep, setCurrentStep] = useState(1);
  const [isLoading, setIsLoading] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);

  // Step 1: Academic Year Data
  const [academicYearData, setAcademicYearData] = useState<AcademicYearData>({
    name: '',
    start_date: '',
    end_date: '',
    is_current: false
  });

  // Step 2: Room Grades & Pricing
  const [roomGrades, setRoomGrades] = useState<RoomGrade[]>([]);
  const [roomGradePricing, setRoomGradePricing] = useState<RoomGradePricing[]>([]);
  const [copyFromPrevious, setCopyFromPrevious] = useState(false);
  const [previousAcademicYear, setPreviousAcademicYear] = useState('');

  // Step 3: Installment Plans
  const [installmentPlans, setInstallmentPlans] = useState<InstallmentPlan[]>([]);
  const [installmentPlanConfigs, setInstallmentPlanConfigs] = useState<InstallmentPlanConfig[]>([]);
  const [autoGenerateDates, setAutoGenerateDates] = useState(true);

  // Step 4: Review
  const [availableAcademicYears, setAvailableAcademicYears] = useState<string[]>([]);

  const steps: WizardStep[] = [
    {
      id: 1,
      title: 'Academic Year Details',
      description: 'Set up the basic information for the new academic year',
      icon: Calendar
    },
    {
      id: 2,
      title: 'Room Grades & Pricing',
      description: 'Configure room grade pricing for this academic year',
      icon: Building
    },
    {
      id: 3,
      title: 'Installment Plans',
      description: 'Set up payment plans and due dates',
      icon: CreditCard
    },
    {
      id: 4,
      title: 'Review & Create',
      description: 'Review all settings and create the academic year',
      icon: CheckCircle
    }
  ];

  useEffect(() => {
    if (isOpen) {
      loadInitialData();
      if (editingAcademicYear) {
        // Initialize with existing academic year data
        setAcademicYearData({
          name: editingAcademicYear.name,
          start_date: editingAcademicYear.start_date,
          end_date: editingAcademicYear.end_date,
          is_current: editingAcademicYear.is_current
        });
      }
    }
  }, [isOpen, editingAcademicYear]);

  const loadInitialData = async () => {
    setIsLoading(true);
    try {
      const [grades, plans, academicYears] = await Promise.all([
        ApiService.getRoomGrades(),
        ApiService.getInstallmentPlans(),
        ApiService.getAcademicYears()
      ]);

      setRoomGrades(grades || []);
      setInstallmentPlans((plans || []).filter(p => p.is_active));
      setAvailableAcademicYears(academicYears.map(ay => ay.name).sort());

      // Initialize room grade pricing with current rates
      setRoomGradePricing((grades || []).map(grade => ({
        room_grade_id: grade.id,
        weekly_rate: grade.weekly_rate
      })));

      // Initialize installment plan configs
      setInstallmentPlanConfigs((plans || []).filter(p => p.is_active).map(plan => ({
        installment_plan_id: plan.id,
        due_dates: plan.due_dates || [],
        deposit_amount: plan.deposit_amount || 500
      })));

    } catch (error) {
      console.error('Error loading initial data:', error);
      toast({
        title: "Error",
        description: "Failed to load initial data. Please try again.",
        variant: "destructive"
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleCopyFromPrevious = async () => {
    if (!previousAcademicYear) return;

    setIsLoading(true);
    try {
      // Get previous year's room grade pricing
      const { data: previousRoomGrades } = await supabase
        .from('academic_year_room_grades')
        .select('*')
        .eq('academic_year', previousAcademicYear)
        .eq('is_active', true);

      if (previousRoomGrades) {
        setRoomGradePricing(previousRoomGrades.map(rg => ({
          room_grade_id: rg.room_grade_id,
          weekly_rate: rg.weekly_rate
        })));
      }

      // Get previous year's installment plan configs
      const { data: previousPlans } = await supabase
        .from('academic_year_installment_plans')
        .select('*')
        .eq('academic_year', previousAcademicYear)
        .eq('is_active', true);

      if (previousPlans) {
        setInstallmentPlanConfigs(previousPlans.map(plan => ({
          installment_plan_id: plan.installment_plan_id,
          due_dates: plan.due_dates || [],
          deposit_amount: plan.deposit_amount || 500
        })));
      }

      toast({
        title: "Success",
        description: `Copied settings from ${previousAcademicYear}`,
      });

    } catch (error) {
      console.error('Error copying from previous year:', error);
      toast({
        title: "Error",
        description: "Failed to copy from previous year. Please try again.",
        variant: "destructive"
      });
    } finally {
      setIsLoading(false);
    }
  };

  const generateDueDates = (plan: InstallmentPlan, academicYear: string): string[] => {
    const startYear = parseInt(academicYear.split('/')[0]);
    const endYear = parseInt(academicYear.split('/')[1]);
    
    const dates: string[] = [];
    const monthsPerInstallment = Math.floor(12 / plan.number_of_installments);
    
    for (let i = 0; i < plan.number_of_installments; i++) {
      const month = 9 + (i * monthsPerInstallment); // Start from September
      const year = month > 12 ? endYear : startYear;
      const actualMonth = month > 12 ? month - 12 : month;
      const date = `${year}-${actualMonth.toString().padStart(2, '0')}-01`;
      dates.push(date);
    }
    
    return dates;
  };

  const updateRoomGradePricing = (roomGradeId: string, weeklyRate: number) => {
    setRoomGradePricing(prev => 
      prev.map(rg => 
        rg.room_grade_id === roomGradeId 
          ? { ...rg, weekly_rate: weeklyRate }
          : rg
      )
    );
  };

  const updateInstallmentPlanConfig = (planId: string, field: keyof InstallmentPlanConfig, value: any) => {
    setInstallmentPlanConfigs(prev => 
      prev.map(config => 
        config.installment_plan_id === planId 
          ? { ...config, [field]: value }
          : config
      )
    );
  };

  const addDueDate = (planId: string, date: string) => {
    const config = installmentPlanConfigs.find(c => c.installment_plan_id === planId);
    if (config) {
      updateInstallmentPlanConfig(planId, 'due_dates', [...config.due_dates, date]);
    }
  };

  const removeDueDate = (planId: string, index: number) => {
    const config = installmentPlanConfigs.find(c => c.installment_plan_id === planId);
    if (config) {
      const newDates = config.due_dates.filter((_, i) => i !== index);
      updateInstallmentPlanConfig(planId, 'due_dates', newDates);
    }
  };

  const handleSubmit = async () => {
    setIsSubmitting(true);
    try {
      // Step 1: Create or update academic year record
      let academicYear;
      if (editingAcademicYear) {
        academicYear = await ApiService.updateAcademicYear(editingAcademicYear.id, {
          name: academicYearData.name,
          start_date: academicYearData.start_date,
          end_date: academicYearData.end_date,
          is_current: academicYearData.is_current,
          is_active: true
        });
      } else {
        academicYear = await ApiService.createAcademicYear({
          name: academicYearData.name,
          start_date: academicYearData.start_date,
          end_date: academicYearData.end_date,
          is_current: academicYearData.is_current,
          is_active: true
        });
      }

      // Step 2: Create room grade templates
      for (const pricing of roomGradePricing) {
        await supabase.from('academic_year_room_grades').insert({
          room_grade_id: pricing.room_grade_id,
          academic_year: academicYearData.name,
          weekly_rate: pricing.weekly_rate,
          is_active: true
        });
      }

      // Step 3: Create installment plan templates
      for (const config of installmentPlanConfigs) {
        const plan = installmentPlans.find(p => p.id === config.installment_plan_id);
        const dueDates = autoGenerateDates && plan 
          ? generateDueDates(plan, academicYearData.name)
          : config.due_dates;

        await supabase.from('academic_year_installment_plans').insert({
          installment_plan_id: config.installment_plan_id,
          academic_year: academicYearData.name,
          due_dates: dueDates,
          deposit_amount: config.deposit_amount,
          is_active: true
        });
      }

      toast({
        title: "Success",
        description: `Academic year ${academicYearData.name} ${editingAcademicYear ? 'updated' : 'created'} successfully!`,
      });

      onSuccess();
      onClose();

    } catch (error) {
      console.error('Error creating academic year:', error);
      toast({
        title: "Error",
        description: "Failed to create academic year. Please try again.",
        variant: "destructive"
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  const renderStep1 = () => (
    <div className="space-y-6">
      <div className="space-y-2">
        <Label htmlFor="academic-year-name">Academic Year Name</Label>
        <Input
          id="academic-year-name"
          placeholder="e.g., 2026/2027"
          value={academicYearData.name}
          onChange={(e) => setAcademicYearData(prev => ({ ...prev, name: e.target.value }))}
        />
      </div>

      <div className="grid grid-cols-2 gap-4">
        <div className="space-y-2">
          <Label htmlFor="start-date">Start Date</Label>
          <Input
            id="start-date"
            type="date"
            value={academicYearData.start_date}
            onChange={(e) => setAcademicYearData(prev => ({ ...prev, start_date: e.target.value }))}
          />
        </div>
        <div className="space-y-2">
          <Label htmlFor="end-date">End Date</Label>
          <Input
            id="end-date"
            type="date"
            value={academicYearData.end_date}
            onChange={(e) => setAcademicYearData(prev => ({ ...prev, end_date: e.target.value }))}
          />
        </div>
      </div>

      <div className="flex items-center space-x-2">
        <Checkbox
          id="is-current"
          checked={academicYearData.is_current}
          onCheckedChange={(checked) => setAcademicYearData(prev => ({ ...prev, is_current: !!checked }))}
        />
        <Label htmlFor="is-current">Set as current academic year</Label>
      </div>
    </div>
  );

  const renderStep2 = () => (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h3 className="text-lg font-medium">Room Grade Pricing</h3>
          <p className="text-sm text-muted-foreground">Set weekly rates for each room grade</p>
        </div>
        <div className="flex items-center space-x-2">
          <Checkbox
            id="copy-from-previous"
            checked={copyFromPrevious}
            onCheckedChange={setCopyFromPrevious}
          />
          <Label htmlFor="copy-from-previous">Copy from previous year</Label>
        </div>
      </div>

      {copyFromPrevious && (
        <div className="flex items-center space-x-2">
          <Select value={previousAcademicYear} onValueChange={setPreviousAcademicYear}>
            <SelectTrigger className="w-48">
              <SelectValue placeholder="Select academic year" />
            </SelectTrigger>
            <SelectContent>
              {availableAcademicYears.map(year => (
                <SelectItem key={year} value={year}>{year}</SelectItem>
              ))}
            </SelectContent>
          </Select>
          <Button onClick={handleCopyFromPrevious} size="sm" variant="outline">
            <Copy className="h-4 w-4 mr-1" />
            Copy
          </Button>
        </div>
      )}

      <div className="space-y-4">
        {roomGrades.map(grade => {
          const pricing = roomGradePricing.find(p => p.room_grade_id === grade.id);
          return (
            <Card key={grade.id}>
              <CardContent className="p-4">
                <div className="flex items-center justify-between">
                  <div>
                    <h4 className="font-medium">{grade.name}</h4>
                    <p className="text-sm text-muted-foreground">{grade.description}</p>
                  </div>
                  <div className="flex items-center space-x-2">
                    <Label htmlFor={`rate-${grade.id}`}>£</Label>
                    <Input
                      id={`rate-${grade.id}`}
                      type="number"
                      step="0.01"
                      className="w-24"
                      value={pricing?.weekly_rate || 0}
                      onChange={(e) => updateRoomGradePricing(grade.id, parseFloat(e.target.value) || 0)}
                    />
                  </div>
                </div>
              </CardContent>
            </Card>
          );
        })}
      </div>
    </div>
  );

  const renderStep3 = () => (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h3 className="text-lg font-medium">Installment Plans</h3>
          <p className="text-sm text-muted-foreground">Configure payment plans and due dates</p>
        </div>
        <div className="flex items-center space-x-2">
          <Checkbox
            id="auto-generate-dates"
            checked={autoGenerateDates}
            onCheckedChange={setAutoGenerateDates}
          />
          <Label htmlFor="auto-generate-dates">Auto-generate due dates</Label>
        </div>
      </div>

      <div className="space-y-4">
        {installmentPlans.map(plan => {
          const config = installmentPlanConfigs.find(c => c.installment_plan_id === plan.id);
          return (
            <Card key={plan.id}>
              <CardHeader>
                <CardTitle className="text-lg">{plan.name}</CardTitle>
                <CardDescription>{plan.description}</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="flex items-center space-x-2">
                  <Label htmlFor={`deposit-${plan.id}`}>Deposit Amount (£)</Label>
                  <Input
                    id={`deposit-${plan.id}`}
                    type="number"
                    step="0.01"
                    className="w-32"
                    value={config?.deposit_amount || 0}
                    onChange={(e) => updateInstallmentPlanConfig(plan.id, 'deposit_amount', parseFloat(e.target.value) || 0)}
                  />
                </div>

                {!autoGenerateDates && (
                  <div className="space-y-2">
                    <Label>Due Dates</Label>
                    <div className="space-y-2">
                      {config?.due_dates.map((date, index) => (
                        <div key={index} className="flex items-center space-x-2">
                          <Input
                            type="date"
                            value={date}
                            onChange={(e) => {
                              const newDates = [...(config.due_dates || [])];
                              newDates[index] = e.target.value;
                              updateInstallmentPlanConfig(plan.id, 'due_dates', newDates);
                            }}
                          />
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => removeDueDate(plan.id, index)}
                          >
                            <X className="h-4 w-4" />
                          </Button>
                        </div>
                      ))}
                      <Button
                        size="sm"
                        variant="outline"
                        onClick={() => addDueDate(plan.id, '')}
                      >
                        <Plus className="h-4 w-4 mr-1" />
                        Add Date
                      </Button>
                    </div>
                  </div>
                )}

                {autoGenerateDates && (
                  <div className="p-3 bg-muted rounded-lg">
                    <p className="text-sm text-muted-foreground">
                      Due dates will be auto-generated based on academic year dates
                    </p>
                  </div>
                )}
              </CardContent>
            </Card>
          );
        })}
      </div>
    </div>
  );

  const renderStep4 = () => (
    <div className="space-y-6">
      <div className="text-center">
        <Sparkles className="h-12 w-12 mx-auto text-primary mb-4" />
        <h3 className="text-lg font-medium">Review Academic Year Setup</h3>
        <p className="text-sm text-muted-foreground">Review all settings before creating the academic year</p>
      </div>

      <div className="space-y-4">
        <Card>
          <CardHeader>
            <CardTitle className="text-base">Academic Year Details</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-2">
              <div className="flex justify-between">
                <span className="text-sm text-muted-foreground">Name:</span>
                <span className="font-medium">{academicYearData.name}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-sm text-muted-foreground">Start Date:</span>
                <span className="font-medium">{academicYearData.start_date}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-sm text-muted-foreground">End Date:</span>
                <span className="font-medium">{academicYearData.end_date}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-sm text-muted-foreground">Current Year:</span>
                <Badge variant={academicYearData.is_current ? "default" : "secondary"}>
                  {academicYearData.is_current ? "Yes" : "No"}
                </Badge>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle className="text-base">Room Grade Pricing</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-2">
              {roomGradePricing.map(pricing => {
                const grade = roomGrades.find(g => g.id === pricing.room_grade_id);
                return (
                  <div key={pricing.room_grade_id} className="flex justify-between">
                    <span className="text-sm text-muted-foreground">{grade?.name}:</span>
                    <span className="font-medium">£{pricing.weekly_rate}</span>
                  </div>
                );
              })}
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle className="text-base">Installment Plans</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-2">
              {installmentPlanConfigs.map(config => {
                const plan = installmentPlans.find(p => p.id === config.installment_plan_id);
                return (
                  <div key={config.installment_plan_id} className="flex justify-between">
                    <span className="text-sm text-muted-foreground">{plan?.name}:</span>
                    <span className="font-medium">£{config.deposit_amount} deposit</span>
                  </div>
                );
              })}
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );

  const renderCurrentStep = () => {
    switch (currentStep) {
      case 1: return renderStep1();
      case 2: return renderStep2();
      case 3: return renderStep3();
      case 4: return renderStep4();
      default: return null;
    }
  };

  const canProceed = () => {
    switch (currentStep) {
      case 1:
        return academicYearData.name && academicYearData.start_date && academicYearData.end_date;
      case 2:
        return roomGradePricing.every(p => p.weekly_rate > 0);
      case 3:
        return installmentPlanConfigs.every(c => c.deposit_amount > 0);
      case 4:
        return true;
      default:
        return false;
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle>{editingAcademicYear ? 'Edit Academic Year' : 'Academic Year Setup Wizard'}</DialogTitle>
          <DialogDescription>
            {editingAcademicYear ? 'Update academic year settings, room grades, pricing, and installment plans' : 'Set up a new academic year with room grades, pricing, and installment plans'}
          </DialogDescription>
        </DialogHeader>

        {/* Progress Steps */}
        <div className="flex items-center justify-between mb-6">
          {steps.map((step, index) => {
            const Icon = step.icon;
            const isActive = currentStep === step.id;
            const isCompleted = currentStep > step.id;
            
            return (
              <div key={step.id} className="flex items-center">
                <div className={`flex items-center justify-center w-10 h-10 rounded-full border-2 ${
                  isActive ? 'border-primary bg-primary text-primary-foreground' :
                  isCompleted ? 'border-green-500 bg-green-500 text-white' :
                  'border-muted-foreground text-muted-foreground'
                }`}>
                  {isCompleted ? <CheckCircle className="h-5 w-5" /> : <Icon className="h-5 w-5" />}
                </div>
                {index < steps.length - 1 && (
                  <div className={`w-16 h-0.5 mx-2 ${
                    isCompleted ? 'bg-green-500' : 'bg-muted-foreground'
                  }`} />
                )}
              </div>
            );
          })}
        </div>

        {/* Step Content */}
        <div className="min-h-[400px]">
          {isLoading ? (
            <div className="flex items-center justify-center h-64">
              <Loader2 className="h-8 w-8 animate-spin" />
            </div>
          ) : (
            renderCurrentStep()
          )}
        </div>

        {/* Navigation */}
        <div className="flex items-center justify-between pt-6 border-t">
          <Button
            variant="outline"
            onClick={() => setCurrentStep(prev => Math.max(1, prev - 1))}
            disabled={currentStep === 1}
          >
            <ArrowLeft className="h-4 w-4 mr-2" />
            Previous
          </Button>

          <div className="flex items-center space-x-2">
            <Button variant="outline" onClick={onClose}>
              Cancel
            </Button>
            {currentStep < 4 ? (
              <Button
                onClick={() => setCurrentStep(prev => Math.min(4, prev + 1))}
                disabled={!canProceed()}
              >
                Next
                <ArrowRight className="h-4 w-4 ml-2" />
              </Button>
            ) : (
              <Button
                onClick={handleSubmit}
                disabled={!canProceed() || isSubmitting}
              >
                {isSubmitting ? (
                  <>
                    <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                    Creating...
                  </>
                ) : (
                  <>
                    <CheckCircle className="h-4 w-4 mr-2" />
                    Create Academic Year
                  </>
                )}
              </Button>
            )}
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
};

export default AcademicYearSetupWizard;
